(()=>{"use strict";var t,e,i,n={75:(t,e)=>{Object.defineProperty(e,"__esModule",{value:!0}),e.DURATION_LINE_SCALES=e.SMALL_FONT_SIZE_MULTIPLIER=e.FONT_SIZE_MULTIPLIER=e.AUGMENTATION_SPACING_FACTOR=e.ACCIDENTAL_SPACING_FACTOR=e.AUGMENTATION_DASH_FACTOR=e.DOT_SIZE_FACTOR=e.OCTAVE_DOT_OFFSET_FACTOR=e.UNDERLINE_SPACING_FACTOR=e.COMPACT_SPACING_FACTOR=e.LINE_STROKE_WIDTH=void 0,e.LINE_STROKE_WIDTH=1,e.COMPACT_SPACING_FACTOR=1.5,e.UNDERLINE_SPACING_FACTOR=.2,e.OCTAVE_DOT_OFFSET_FACTOR=1,e.DOT_SIZE_FACTOR=.1,e.AUGMENTATION_DASH_FACTOR=.8,e.ACCIDENTAL_SPACING_FACTOR=.1,e.AUGMENTATION_SPACING_FACTOR=.2,e.FONT_SIZE_MULTIPLIER=1.2,e.SMALL_FONT_SIZE_MULTIPLIER=.75,e.DURATION_LINE_SCALES=new Map([[1,1.78],[2,1.6],[3,1.3],[4,1.15]])},88:(t,e,i)=>{Object.defineProperty(e,"__esModule",{value:!0}),e.JianpuSVGRender=e.ScrollType=void 0;var n,s=i(75),a=i(811),r=i(388),o=i(567),h=i(186),l=i(214);!function(t){t[t.PAGE=0]="PAGE",t[t.NOTE=1]="NOTE",t[t.BAR=2]="BAR"}(n||(e.ScrollType=n={}));var u=function(){function t(t,e,i){var a,r,l,u,c,d,p,g,m,f,S,y=this;this.handleScrollEvent=function(t){y.lastKnownScrollLeft=y.parentElement.scrollLeft,y.isScrolling||window.requestAnimationFrame((function(){y.updateOverlaySignaturesForScroll(y.lastKnownScrollLeft),y.isScrolling=!1})),y.isScrolling=!0},this.jianpuInfo=t,this.div=i,this.config={noteHeight:null!==(a=e.noteHeight)&&void 0!==a?a:20,noteSpacingFactor:null!==(r=e.noteSpacingFactor)&&void 0!==r?r:s.COMPACT_SPACING_FACTOR,pixelsPerTimeStep:null!==(l=e.pixelsPerTimeStep)&&void 0!==l?l:0,noteColor:null!==(u=e.noteColor)&&void 0!==u?u:"black",activeNoteColor:null!==(c=e.activeNoteColor)&&void 0!==c?c:"red",defaultKey:null!==(d=e.defaultKey)&&void 0!==d?d:0,scrollType:null!==(p=e.scrollType)&&void 0!==p?p:n.PAGE,fontFamily:null!==(g=e.fontFamily)&&void 0!==g?g:"sans-serif",width:null!==(m=e.width)&&void 0!==m?m:0,height:null!==(f=e.height)&&void 0!==f?f:0},this.jianpuModel=new h.JianpuModel(this.jianpuInfo,this.config.defaultKey),this.currentKey=this.jianpuModel.measuresInfo.keySignatureAtQ(0),this.currentTimeSignature=null!==(S=this.jianpuModel.measuresInfo.timeSignatureAtQ(0))&&void 0!==S?S:o.DEFAULT_TIME_SIGNATURE,this.playingNotes=new Map,this.lastRenderedQ=-1,this.signaturesBlinking=!1,this.lastKnownScrollLeft=0,this.isScrolling=!1,this.numberFontSize=this.config.noteHeight*s.FONT_SIZE_MULTIPLIER,this.smallFontSize=this.config.noteHeight*s.SMALL_FONT_SIZE_MULTIPLIER,this.estimatedNoteWidth=.6*this.numberFontSize,this.yBaseline=1.5*this.config.noteHeight,this.height=0,this.width=0,this.clear(),this.redraw()}return t.prototype.clear=function(){for(var t;this.div.lastChild;)this.div.removeChild(this.div.lastChild);this.div.style.position="relative",this.div.style.overflow="hidden",this.overlaySVG=document.createElementNS(a.SVGNS,"svg"),this.overlaySVG.style.position="absolute",this.overlaySVG.style.left="0",this.overlaySVG.style.top="0",this.overlaySVG.style.pointerEvents="none",this.div.appendChild(this.overlaySVG),this.overlayG=(0,a.createSVGGroupChild)(this.overlaySVG,"overlay"),this.parentElement=document.createElement("div"),this.parentElement.style.overflowX="auto",this.parentElement.style.overflowY="hidden",this.parentElement.style.width="100%",this.parentElement.style.height="100%",this.div.appendChild(this.parentElement),this.parentElement.addEventListener("scroll",this.handleScrollEvent),this.mainSVG=document.createElementNS(a.SVGNS,"svg"),this.mainSVG.style.display="block",this.parentElement.appendChild(this.mainSVG),this.mainG=(0,a.createSVGGroupChild)(this.mainSVG,"main-content"),this.signaturesG=(0,a.createSVGGroupChild)(this.mainG,"signatures"),this.musicG=(0,a.createSVGGroupChild)(this.mainG,"music"),this.playingNotes.clear(),this.lastRenderedQ=-1,this.signaturesBlinking=!1,this.lastKnownScrollLeft=0,this.isScrolling=!1,this.height=this.config.height>0?this.config.height:5*this.config.noteHeight,this.width=this.config.width>0?this.config.width:0,this.currentKey=this.jianpuModel.measuresInfo.keySignatureAtQ(0),this.currentTimeSignature=null!==(t=this.jianpuModel.measuresInfo.timeSignatureAtQ(0))&&void 0!==t?t:o.DEFAULT_TIME_SIGNATURE,this.drawSignatures(this.overlayG,0,!0,!0),this.updateLayout()},t.prototype.updateLayout=function(t){this.width=null!=t?t:this.width,this.config.width>0&&(this.width=this.config.width),this.height=Math.max(this.height,6*this.config.noteHeight),this.config.height>0&&(this.height=this.config.height);var e=1.65*this.config.noteHeight;this.mainSVG.setAttribute("width","".concat(this.width)),this.mainSVG.setAttribute("height","".concat(this.height)),this.mainG.setAttribute("transform","translate(0, ".concat(this.yBaseline+e,")")),this.overlaySVG.setAttribute("width","200"),this.overlaySVG.setAttribute("height","".concat(this.height)),this.overlayG.setAttribute("transform","translate(0, ".concat(this.yBaseline,")"))},t.prototype.redraw=function(t,e){var i=this,s=-1,r=this.config.pixelsPerTimeStep<=0;if(t){var o="".concat(t.start,"-").concat(t.pitch);if(this.playingNotes.forEach((function(t,e){if(e!==o){var n=i.mainSVG.querySelector('g[data-id="'.concat(e,'"]'));n&&(0,a.resetElementHighlight)(n,i.config.noteColor),i.playingNotes.delete(e)}})),!this.playingNotes.has(o)){var h=this.mainSVG.querySelector('g[data-id="'.concat(o,'"]'));if(h){(0,a.highlightElement)(h,this.config.activeNoteColor),this.playingNotes.set(o,t);var l=h.getBoundingClientRect(),u=this.mainSVG.getBoundingClientRect();s=l.left-u.left+this.parentElement.scrollLeft;var c=h.hasAttribute("data-is-measure-start");e&&(this.config.scrollType!==n.BAR||c)&&this.scrollIntoViewIfNeeded(s)}}if(!r&&this.signaturesBlinking){var d=this.overlayG.getBoundingClientRect().width;this.jianpuModel.measuresInfo.quartersToTime(t.start,t.start)*this.config.pixelsPerTimeStep>d&&(this.signaturesBlinking=!1,(0,a.setBlinkAnimation)(this.overlayG,!1))}}else{this.jianpuModel.update(this.jianpuInfo,this.config.defaultKey);var p=this.width,g=this.width,m=this.height>0?this.height-this.yBaseline:3*this.config.noteHeight,f=0,S=new Map;this.jianpuModel.jianpuBlockMap.forEach((function(t,e){if(e>=i.lastRenderedQ-1e-9){p=r?g:i.jianpuModel.measuresInfo.quartersToTime(e,e)*i.config.pixelsPerTimeStep;var n=i.drawJianpuBlock(t,p,S);r?g+=n:g=Math.max(g,p+n);var s=i.mainSVG.querySelector('g[data-block-start="'.concat(t.start,'"]'));if(s)try{var a=s.getBBox(),o=a.y,h=a.y+a.height;f=Math.min(f,o),m=Math.max(m,h)}catch(t){}i.lastRenderedQ=e+t.length}})),this.height=Math.max(this.height,m-f+this.config.noteHeight),this.updateLayout(g)}return s},t.prototype.drawJianpuBlock=function(t,e,i){var n=0,o=this.config.pixelsPerTimeStep<=0,h=t.isMeasureBeginning(),l=(0,a.createSVGGroupChild)(this.musicG,"block-".concat(t.start));if(l.setAttribute("data-block-start","".concat(t.start)),h&&t.start>1e-6){var u=e-(o?.6*this.estimatedNoteWidth:4),c=2*this.config.noteHeight,d=0,p=(0,a.drawSVGPath)(this.musicG,r.barPath,u,d,1,c/r.PATH_SCALE);(0,a.setStroke)(p,this.config.noteColor,s.LINE_STROKE_WIDTH),o&&(n+=s.LINE_STROKE_WIDTH)}var g=this.updateCurrentKey(t.start),m=this.updateCurrentTimeSignature(t.start),f=0;if((g||m)&&t.start>1e-6){var S=e+n;f=this.drawSignatures(this.signaturesG,S,g,m),o&&(n+=f+.2*this.estimatedNoteWidth)}var y=e+n,v=0;if(t.notes.length>0?v=this.drawNotes(t,y,i,l):t.length>1e-6&&(v=this.drawRest(t,y,l)),o){n+=v;var T=this.estimatedNoteWidth*this.config.noteSpacingFactor;t.beatEnd?T*=1:t.length<.0625?T*=.05:t.length<.125?T*=.1:t.length<.25?T*=.2:t.length<.5?T*=.4:t.length<1&&(T*=.5),n+=T}else n=Math.max(f,v);return this.jianpuModel.isLastMeasureAtQ(t.start+t.length)&&(u=e+n,c=2*this.config.noteHeight,d=0,p=(0,a.drawSVGPath)(this.musicG,r.barPath,u,d,1,c/r.PATH_SCALE),(0,a.setStroke)(p,this.config.noteColor,s.LINE_STROKE_WIDTH),o&&(n+=s.LINE_STROKE_WIDTH)),n},t.prototype.drawNotes=function(t,e,i,n){var o=this,h=e,l=e,u=.1*this.estimatedNoteWidth,c="".concat(this.numberFontSize,"px"),d="".concat(this.smallFontSize,"px"),p=t.durationLines,g=void 0===p?0:p,m=t.augmentationDots,f=void 0===m?0:m,S=t.augmentationDash,y=void 0!==S&&S;return t.notes.forEach((function(e){var p,m,S,v="".concat(e.start,"-").concat(e.pitch),T=(0,a.createSVGGroupChild)(n,v);t.isMeasureBeginning()&&T.setAttribute("data-is-measure-start","true");var A=h,E=A;if(0!==e.accidental){var I=r.ACCIDENTAL_TEXT[e.accidental];(0,a.drawSVGText)(T,I,A+u,0,d,"normal","end","text-top",o.config.noteColor)}var N=0;if(y){var _=o.config.noteHeight*s.AUGMENTATION_DASH_FACTOR,b=_/50,M=(0,a.drawSVGPath)(T,r.augmentationDashPath,A,0,b,1);(0,a.setStroke)(M,o.config.noteColor,s.LINE_STROKE_WIDTH),E=A+(N=_)}else{var C="".concat(e.jianpuNumber);E=A+(N=(0,a.drawSVGText)(T,C,A,0,c,"normal","start","middle",o.config.noteColor).getBBox().width)}if(0!==e.octaveDot&&!1===y)for(var L=(H=o.config.noteHeight*s.DOT_SIZE_FACTOR)/(.15*r.PATH_SCALE),w=A+N/2,O=2.8*H,D=o.config.noteHeight*s.OCTAVE_DOT_OFFSET_FACTOR,R=0;R<Math.abs(e.octaveDot);R++){var G=(e.octaveDot>0?-D:.6*D)-R*O*(e.octaveDot>0?1:-1);(0,a.drawSVGPath)(T,r.dotPath,w,G,L,L)}if(g>0)for(var k=o.config.noteHeight*s.UNDERLINE_SPACING_FACTOR*2.5,P=o.config.noteHeight*s.UNDERLINE_SPACING_FACTOR,F=N/r.PATH_SCALE*(null!==(p=s.DURATION_LINE_SCALES.get(g))&&void 0!==p?p:1),V=0;V<g;V++){var x=k+V*P,B=(0,a.drawSVGPath)(T,r.underlinePath,A,x,F,1);(0,a.setStroke)(B,o.config.noteColor,s.LINE_STROKE_WIDTH)}var U=E+u;if(f>0){var H;for(L=(H=o.config.noteHeight*s.DOT_SIZE_FACTOR)/(.15*r.PATH_SCALE),R=0;R<f;R++)(0,a.drawSVGPath)(T,r.dotPath,U,0,L,L),U+=H+u;E=U+u}var j=E;if(e.tiedTo&&!y)i.set(e,{g:T,xNoteRight:j,yNoteBaseline:0});else if(e.tiedFrom){for(var Q=e.tiedFrom;Q.tiedFrom;)Q=Q.tiedFrom;var J=i.get(Q);if(J){var K=1*J.xNoteRight,W=(y?A-2.2*o.estimatedNoteWidth:A-u)-K,q=1.2*-o.config.noteHeight,Z=W/r.PATH_SCALE*1.3,z=o.config.noteHeight/r.PATH_SCALE*1.6;W>1&&(0,a.drawSVGPath)(J.g,r.tiePath,K-(null!==(S=null===(m=J.g.getCTM())||void 0===m?void 0:m.e)&&void 0!==S?S:0),q,Z,z);for(var X=Q;X&&X!==e;){i.delete(X);var Y=X.tiedTo;Y&&(X=Y)}}else console.warn("Missing linked SVG details for first tied note:",Q)}l=Math.max(l,E)})),l-e},t.prototype.drawRest=function(t,e,i){var n,o="".concat(this.numberFontSize,"px"),h=.1*this.estimatedNoteWidth,l=t.durationLines,u=void 0===l?0:l,c=t.augmentationDots,d=void 0===c?0:c,p=e,g=p,m=(0,a.drawSVGText)(i,"0",p,0,o,"normal","start","middle",this.config.noteColor).getBBox().width;if(g=p+m,u>0)for(var f=this.config.noteHeight*s.UNDERLINE_SPACING_FACTOR*2.5,S=this.config.noteHeight*s.UNDERLINE_SPACING_FACTOR,y=m/r.PATH_SCALE*(null!==(n=s.DURATION_LINE_SCALES.get(u))&&void 0!==n?n:1),v=0;v<u;v++){var T=f+v*S,A=(0,a.drawSVGPath)(i,r.underlinePath,p,T,y,1);(0,a.setStroke)(A,this.config.noteColor,s.LINE_STROKE_WIDTH)}var E=g+h;if(d>0){for(var I=this.config.noteHeight*s.DOT_SIZE_FACTOR,N=I/(.15*r.PATH_SCALE),_=0;_<d;_++)(0,a.drawSVGPath)(i,r.dotPath,E,0,N,N),E+=I+h;g=E+h}return g-e},t.prototype.drawSignatures=function(t,e,i,n){var s,r=e,o=.3*this.estimatedNoteWidth,h="".concat(this.smallFontSize,"px"),u="".concat(this.numberFontSize,"px");if(i){var c=null!==(s=l.PITCH_CLASS_NAMES[this.currentKey%12])&&void 0!==s?s:"C",d="1=".concat(c);r+=(0,a.drawSVGText)(t,d,r,0,u,"normal","start","middle",this.config.noteColor).getBBox().width+2*o}if(n){var p="".concat(this.currentTimeSignature.numerator,"/").concat(this.currentTimeSignature.denominator);r+=(0,a.drawSVGText)(t,p,r,0,h,"normal","start","middle",this.config.noteColor).getBBox().width+o}var g=r-e;try{var m=t.getBBox(),f=m.y,S=m.y+m.height,y=Math.max(this.yBaseline+S,this.yBaseline-f)+.5*this.config.noteHeight;this.height=Math.max(this.height,y)}catch(t){}return t===this.overlayG&&this.config.pixelsPerTimeStep>0&&(this.signaturesBlinking=!0,(0,a.setBlinkAnimation)(this.overlayG,!0)),g},t.prototype.updateCurrentKey=function(t){var e=this.jianpuModel.measuresInfo.keySignatureAtQ(t,!0);return-1!==e&&e!==this.currentKey&&(this.currentKey=e,!0)},t.prototype.updateCurrentTimeSignature=function(t){var e=this.jianpuModel.measuresInfo.timeSignatureAtQ(t,!0);return!(!e||e.numerator===this.currentTimeSignature.numerator&&e.denominator===this.currentTimeSignature.denominator||(this.currentTimeSignature=e,0))},t.prototype.scrollIntoViewIfNeeded=function(t){var e=this.parentElement.getBoundingClientRect().width,i=this.parentElement.scrollLeft,s=i;this.config.scrollType===n.PAGE?t<i+20?s=t-20:t>i+e-20&&(s=t-e+20):s=t-.5*e,s=Math.max(0,Math.min(s,this.parentElement.scrollWidth-e)),Math.abs(s-i)>1&&(this.parentElement.scrollTo({left:s,behavior:"smooth"}),this.updateOverlaySignaturesForScroll(s))},t.prototype.updateOverlaySignaturesForScroll=function(t){var e,i=this.pixelsToTime(t),n=this.jianpuModel.measuresInfo.keySignatureAtQ(i),s=null!==(e=this.jianpuModel.measuresInfo.timeSignatureAtQ(i))&&void 0!==e?e:this.currentTimeSignature,r=!1;if(n!==this.currentKey&&(this.currentKey=n,r=!0),s.numerator===this.currentTimeSignature.numerator&&s.denominator===this.currentTimeSignature.denominator||(this.currentTimeSignature=s,r=!0),r){for(;this.overlayG.lastChild;)this.overlayG.removeChild(this.overlayG.lastChild);this.drawSignatures(this.overlayG,0,!0,!0),t<10&&this.config.pixelsPerTimeStep>0?((0,a.setBlinkAnimation)(this.overlayG,!0),this.signaturesBlinking=!0):this.config.pixelsPerTimeStep>0&&((0,a.setBlinkAnimation)(this.overlayG,!1),this.signaturesBlinking=!1)}},t.prototype.pixelsToTime=function(t){return this.config.pixelsPerTimeStep<=0?0:this.jianpuModel.measuresInfo.timeToQuarters(t/this.config.pixelsPerTimeStep,0)},t}();e.JianpuSVGRender=u},186:function(t,e,i){var n=this&&this.__assign||function(){return n=Object.assign||function(t){for(var e,i=1,n=arguments.length;i<n;i++)for(var s in e=arguments[i])Object.prototype.hasOwnProperty.call(e,s)&&(t[s]=e[s]);return t},n.apply(this,arguments)};Object.defineProperty(e,"__esModule",{value:!0}),e.JianpuModel=void 0,e.mapMidiToJianpu=l;var s=i(567),a=i(980),r=i(826),o=i(214),h=function(){function t(t,e){this.jianpuInfo=t,this.jianpuBlockMap=new Map,this.lastQ=0,this.update(t,e)}return t.prototype.isLastMeasureAtQ=function(t){return t>=this.lastQ-1e-6},t.prototype.getTotalDuration=function(){return this.lastQ},t.prototype.update=function(t,e){var i=this;this.jianpuInfo=t,t.notes.sort((function(t,e){return t.start-e.start})),this.lastQ=0,t.notes.forEach((function(t){i.lastQ=Math.max(i.lastQ,t.start+t.length)})),this.lastQ+=1e-6,t.tempos=t.tempos&&t.tempos.length?t.tempos:[s.DEFAULT_TEMPO],t.tempos.sort((function(t,e){return t.start-e.start})),t.tempos[0].start>1e-6&&t.tempos.unshift(n(n({},s.DEFAULT_TEMPO),{start:0}));var r=void 0!==e?{start:0,key:e}:n({},s.DEFAULT_KEY_SIGNATURE);t.keySignatures=t.keySignatures&&t.keySignatures.length?t.keySignatures:[r],t.keySignatures.sort((function(t,e){return t.start-e.start})),t.keySignatures[0].start>1e-6&&t.keySignatures.unshift(n(n({},r),{start:0})),t.timeSignatures=t.timeSignatures&&t.timeSignatures.length?t.timeSignatures:[s.DEFAULT_TIME_SIGNATURE],t.timeSignatures.sort((function(t,e){return t.start-e.start})),t.timeSignatures[0].start>1e-6&&t.timeSignatures.unshift(n(n({},s.DEFAULT_TIME_SIGNATURE),{start:0})),this.measuresInfo=new a.MeasuresInfo(t,this.lastQ),this.infoToBlocks()},t.prototype.infoToBlocks=function(){var t=this,e=new Map,i=0;if(this.jianpuInfo.notes.forEach((function(n){var s=n.start,a=t.measuresInfo.measureNumberAtQ(s);if(s>i+1e-6){var o=i,h=s-o,l=t.measuresInfo.measureNumberAtQ(o),u=new r.JianpuBlock(o,h,[],l);e.set(o,u)}var c=t.measuresInfo.keySignatureAtQ(s),d=t.createJianpuNote(n,c),p=e.get(s);p||(p=new r.JianpuBlock(s,0,[],a),e.set(s,p)),p.addNote(d),i=Math.max(i,s+p.length)})),this.lastQ>i+1e-6){var n=i,s=this.lastQ-n;if(s>1e-6){var a=this.measuresInfo.measureNumberAtQ(n),o=new r.JianpuBlock(n,s,[],a);e.set(n,o)}}this.jianpuBlockMap=new Map;var h=Array.from(e.keys()).sort((function(t,e){return t-e})),l=[];h.forEach((function(t){l.push(e.get(t))}));for(var u=new Set;l.length>0;){var c=l.shift();u.has(c.start)&&this.jianpuBlockMap.has(c.start);var d=c.splitToBeat(this.measuresInfo);if(d)c.mergeToMap(this.jianpuBlockMap),u.add(c.start),l.unshift(d);else{var p=c,g=null;do{g=p.splitToStandardSymbol(this.measuresInfo),p.mergeToMap(this.jianpuBlockMap),u.add(p.start),g&&(p=g)}while(g)}}this.jianpuBlockMap.forEach((function(e){e.calculateRenderProperties(t.measuresInfo)}))},t.prototype.createJianpuNote=function(t,e){var i=l(t.pitch,e);return n(n({},t),{jianpuNumber:i.jianpuNumber,octaveDot:i.octaveDot,accidental:i.accidental})},t}();function l(t,e){var i=e%12,n=o.MIDDLE_C_MIDI+i;i>o.MIDDLE_C_MIDI%12&&(n-=12);var s=(t-(n+12*Math.round((t-n)/12))+12)%12,a=o.MAJOR_SCALE_INTERVALS[s],r=0;if(void 0===a){switch(s){case 1:a=o.MAJOR_SCALE_INTERVALS[0],r=1;break;case 3:a=o.MAJOR_SCALE_INTERVALS[4],r=2;break;case 6:a=o.MAJOR_SCALE_INTERVALS[5],r=1;break;case 8:a=o.MAJOR_SCALE_INTERVALS[9],r=2;break;case 10:a=o.MAJOR_SCALE_INTERVALS[11],r=2;break;default:console.warn("Unexpected chromatic interval ".concat(s," in mapMidiToJianpu. Defaulting to sharp of lower valid degree."));var h=(s-1+12)%12,l=(s+1+12)%12,u=o.MAJOR_SCALE_INTERVALS[h],c=o.MAJOR_SCALE_INTERVALS[l];void 0!==u?(a=u,r=1):void 0!==c?(a=c,r=2):(a=1,r=1,console.error("Could not determine Jianpu number components for MIDI ".concat(t,", interval ").concat(s," from tonic in key ").concat(e,".")))}void 0===a&&(console.error("Jianpu number became undefined for MIDI ".concat(t," (interval ").concat(s,", key ").concat(e,") after chromatic processing. This indicates a logic error or misconfigured MAJOR_SCALE_INTERVALS.")),a=1,r=1)}return{jianpuNumber:a,octaveDot:Math.floor((t-n)/12),accidental:r}}e.JianpuModel=h},214:(t,e)=>{Object.defineProperty(e,"__esModule",{value:!0}),e.MIDDLE_C_MIDI=e.MAJOR_SCALE_INTERVALS=e.PITCH_CLASS_NAMES=e.MAX_QUARTER_DIVISION=e.MIN_RESOLUTION=void 0,e.MIN_RESOLUTION=.0625,e.MAX_QUARTER_DIVISION=240,e.PITCH_CLASS_NAMES=["C","C#","D","D#","E","F","F#","G","G#","A","A#","B"],e.MAJOR_SCALE_INTERVALS={0:1,2:2,4:3,5:4,7:5,9:6,11:7},e.MIDDLE_C_MIDI=60},229:function(t,e,i){var n=this&&this.__createBinding||(Object.create?function(t,e,i,n){void 0===n&&(n=i);var s=Object.getOwnPropertyDescriptor(e,i);s&&!("get"in s?!e.__esModule:s.writable||s.configurable)||(s={enumerable:!0,get:function(){return e[i]}}),Object.defineProperty(t,n,s)}:function(t,e,i,n){void 0===n&&(n=i),t[n]=e[i]}),s=this&&this.__exportStar||function(t,e){for(var i in t)"default"===i||Object.prototype.hasOwnProperty.call(e,i)||n(e,t,i)};Object.defineProperty(e,"__esModule",{value:!0}),s(i(88),e),s(i(186),e),s(i(826),e),s(i(567),e)},291:(t,e)=>{Object.defineProperty(e,"__esModule",{value:!0}),e.testData=void 0,e.testData=[];var i=0;e.testData[0]={title:"Note symbols and their durations",description:"Notes of different length should complete each bar going from     whole note through 1/2th, 1/4th, 1/8th, 1/16th, 1/32th and 1/64th, which     is the lowest handled resolution.",data:{notes:[]}},i=0;for(var n=1;n<128;n*=2)for(var s=4/n,a=0;a<n;++a){var r=67+(a>=n/2?5:0);e.testData[0].data.notes.push({start:i,length:s,pitch:r,intensity:127}),i+=s}for(e.testData[1]={title:"simple note display",description:"simple note display",data:{notes:[{start:0,length:1,pitch:69,intensity:127},{start:1,length:1,pitch:71,intensity:127},{start:2,length:1,pitch:72,intensity:127},{start:3,length:1,pitch:74,intensity:127}]}},e.testData[2]={title:"Rest symbols and their durations",description:"Notes of different length should be paired with their relative     rest. Last note has been placed to complete the bar and make previous rest     noticeable.",data:{notes:[]}},i=0,n=1;n<128;n*=2)s=4/n,e.testData[2].data.notes.push({start:i,length:s,pitch:67,intensity:127}),i+=2*s;for(e.testData[2].data.notes.push({start:i,length:.125,pitch:67,intensity:127}),e.testData[3]={title:"Dotted notes",description:"Note length can be extended to a 150% of its nominal value     adding a dot after the note symbol. This applies to all number notation     symbols but it will not be applied to rests symbols in jianpu system,     following the simplified notation principles that prioritize readability.     Last note is included to make previous rests noticeable.",data:{notes:[{start:0,length:3,pitch:67,intensity:127},{start:3.75,length:.25,pitch:67,intensity:127},{start:4,length:3,pitch:72,intensity:127},{start:7,length:.75,pitch:74,intensity:127},{start:7.75,length:.25,pitch:72,intensity:127}]}},e.testData[4]={title:"Jianpu High-High Pitch Test",description:"This test is designed to verify the display and handling of high - high pitches in the jianpu system. It includes a series of notes with high - high pitches to ensure the correct representation in the rendering process.",data:{notes:[{start:0,length:1,pitch:62,intensity:127},{start:1,length:1,pitch:64,intensity:127},{start:2,length:1,pitch:65,intensity:127},{start:3,length:1,pitch:67,intensity:127},{start:4,length:1,pitch:69,intensity:127},{start:5,length:1,pitch:71,intensity:127},{start:6,length:1,pitch:72,intensity:127},{start:7,length:1,pitch:74,intensity:127},{start:8,length:1,pitch:76,intensity:127},{start:9,length:1,pitch:77,intensity:127},{start:10,length:1,pitch:79,intensity:127},{start:11,length:1,pitch:60,intensity:127},{start:12,length:1,pitch:59,intensity:127},{start:13,length:1,pitch:57,intensity:127},{start:14,length:1,pitch:55,intensity:127},{start:15,length:1,pitch:81,intensity:127},{start:16,length:1,pitch:83,intensity:127},{start:17,length:1,pitch:84,intensity:127},{start:18,length:1,pitch:86,intensity:127}]}},e.testData[5]={title:"Test of Jianpu Low-Low Pitch Symbols",description:"This test is designed to verify the display and handling of low - low pitch symbols in the jianpu system. It includes a series of notes with low - low pitches to ensure the correct representation in the rendering process.",data:{notes:[{start:0,length:1,pitch:59,intensity:127},{start:1,length:1,pitch:57,intensity:127},{start:2,length:1,pitch:55,intensity:127},{start:3,length:1,pitch:53,intensity:127},{start:4,length:1,pitch:52,intensity:127},{start:5,length:1,pitch:50,intensity:127},{start:6,length:1,pitch:48,intensity:127},{start:7,length:1,pitch:47,intensity:127},{start:8,length:1,pitch:45,intensity:127},{start:9,length:1,pitch:43,intensity:127},{start:10,length:1,pitch:41,intensity:127},{start:11,length:1,pitch:60,intensity:127},{start:12,length:1,pitch:62,intensity:127},{start:13,length:1,pitch:64,intensity:127},{start:14,length:1,pitch:65,intensity:127},{start:15,length:1,pitch:40,intensity:127},{start:16,length:1,pitch:38,intensity:127},{start:17,length:1,pitch:36,intensity:127},{start:18,length:1,pitch:35,intensity:127}]}},e.testData[6]={title:"Sharp Accidentals",description:"In jianpu notation, the sharp symbol '#' only affects the immediate note it precedes. Unlike staff notation, it does not carry through the rest of the measure. Each note requiring alteration must be explicitly marked.",data:{keySignatures:[{start:0,key:7}],notes:[{start:0,length:.5,pitch:67,intensity:127},{start:.5,length:.5,pitch:68,intensity:127},{start:1,length:.5,pitch:68,intensity:127},{start:1.5,length:.5,pitch:80,intensity:127},{start:2,length:.5,pitch:67,intensity:127},{start:2.5,length:.5,pitch:80,intensity:127},{start:3,length:.5,pitch:67,intensity:127},{start:3.5,length:.5,pitch:68,intensity:127},{start:4,length:2,pitch:68,intensity:127},{start:6,length:2,pitch:66,intensity:127}]}},e.testData[7]={title:"Flat Accidentals",description:"Similar to sharp accidentals, the flat symbol 'b' in jianpu only applies to the single note it directly precedes. This differs from staff notation where accidentals affect all subsequent same-pitch notes in the measure.",data:{keySignatures:[{start:0,key:5}],notes:[{start:0,length:.5,pitch:69,intensity:127},{start:.5,length:.5,pitch:68,intensity:127},{start:1,length:.5,pitch:68,intensity:127},{start:1.5,length:.5,pitch:80,intensity:127},{start:2,length:.5,pitch:69,intensity:127},{start:2.5,length:.5,pitch:80,intensity:127},{start:3,length:.5,pitch:69,intensity:127},{start:3.5,length:.5,pitch:68,intensity:127},{start:4,length:2,pitch:68,intensity:127},{start:6,length:2,pitch:58,intensity:127}]}},e.testData[8]={title:"Key Signatures on chromatic scales",description:"There is a close set of 12 Key Signatures. Half of them use     sharps (from 0 to 5 sharps: C, G, D, A, E and B keys, the right side of     the Circle of Fifths) and the rest use flats (from 1 to 6 flats: F, Bb,     Eb, Ab, Db and Gb keys). Following score will show a chromatic scale on     each key in that precise order. Overlapping keys with different names (Gb     = F#) have been removed for simplicity sake. Accidentals will be of a     unique kind along a given key, so tere won't appear a mix sharps and     flats (even though it's allowed in musical handwriting).",data:{keySignatures:[{start:0,key:0},{start:12,key:7},{start:24,key:2},{start:36,key:9},{start:48,key:4},{start:60,key:11},{start:72,key:5},{start:84,key:10},{start:96,key:3},{start:108,key:8},{start:120,key:1},{start:132,key:6}],notes:[]}},i=0,n=0;n<12;++n)for(var o=60;o<72;++o)e.testData[8].data.notes.push({start:i++,length:1,pitch:o,intensity:127});e.testData[9]={title:"Time Signatures",description:'Notes can be gropued on bars according to "beat" rhythm     patterns, defined by Time Signatures consisting on a numerator and a     denominator number. Denominator defines the length of its beat as the     fraction of a whole note, and numerator defines the number of beats     needed to complete a bar. A Time Signature shown at the beginning of a     bar changes rhythm to that bar and followings. Next score shows several     Time Signatures.',data:{timeSignatures:[],notes:[]}},i=0;for(var h=2;h<=8;h*=2){var l=4/h,u=e.testData[9].data;for(n=2;n<=12;++n)for(u.timeSignatures.push({start:i,numerator:n,denominator:h}),a=0;a<n;++a)u.notes.push({start:i,length:l,pitch:67,intensity:127}),i+=l}e.testData[10]={title:"Whole rests",description:"Whole rest symbol is used to specify a whole silent bar, no     matter which the time signature is.",data:{timeSignatures:[{start:0,numerator:3,denominator:4},{start:6,numerator:6,denominator:8},{start:12,numerator:7,denominator:2},{start:40,numerator:4,denominator:4}],notes:[{start:3,length:3,pitch:67,intensity:127},{start:9,length:3,pitch:67,intensity:127},{start:26,length:14,pitch:67,intensity:127},{start:44,length:4,pitch:67,intensity:127}]}},e.testData[11]={title:"Ties",description:"Notes longer than avilable note symbols length can be achieved   combining two or more through ties. Notes which surpass bars must be   splitted using ties. Rest aggregation does not need any tie. Following score   shows three tied notes, a rests set and two tied notes to surpass a bar.",data:{notes:[{start:0,length:2.625,pitch:67,intensity:127},{start:3,length:5,pitch:67,intensity:127}]}}},388:(t,e)=>{Object.defineProperty(e,"__esModule",{value:!0}),e.dotPath=e.tiePath=e.augmentationDashPath=e.underlinePath=e.barPath=e.ACCIDENTAL_TEXT=e.ACCIDENTAL_PATHS=e.PATH_SCALE=void 0,e.PATH_SCALE=100,e.ACCIDENTAL_PATHS=[null,"m 30,15 h 40 m -35,20 h 40 M 50,0 v 50 M 70,5 v 50","m 45,5 v 40 c 0,15 20,15 20,0 V 20 C 65,5 45,5 45,5 Z","M 45,5 v 45 M 65,0 v 45 H 45 m 20,10 H 45"],e.ACCIDENTAL_TEXT=["","#","b"],e.barPath="m 0,-50 v 100",e.underlinePath="m 0,0 h 100",e.augmentationDashPath="m 0,0 h 50",e.tiePath="M -13,5 C 15,-15 65,-15 90,5 C 65,-25 15,-25 -13,5 Z",e.dotPath="M 0 0 a 15 15 0 1 0 0.0001 0 z"},567:(t,e)=>{Object.defineProperty(e,"__esModule",{value:!0}),e.DEFAULT_TIME_SIGNATURE=e.DEFAULT_KEY_SIGNATURE=e.DEFAULT_TEMPO=void 0,e.getMeasureLength=function(t){return t.numerator*(4/t.denominator)},e.DEFAULT_TEMPO={start:0,qpm:60},e.DEFAULT_KEY_SIGNATURE={start:0,key:0},e.DEFAULT_TIME_SIGNATURE={start:0,numerator:4,denominator:4}},811:(t,e)=>{Object.defineProperty(e,"__esModule",{value:!0}),e.SVGNS=void 0,e.drawSVGPath=function(t,i,n,s,a,r,o){void 0===o&&(o=1);var h=document.createElementNS(e.SVGNS,"path");return h.setAttributeNS(null,"d",i),h.setAttributeNS(null,"transform","translate(".concat(n,", ").concat(s,") scale(").concat(a,", ").concat(r,")")),o<1&&h.setAttributeNS(null,"opacity","".concat(o)),t.appendChild(h),h},e.drawSVGText=function(t,i,n,s,a,r,o,h,l,u){void 0===r&&(r="normal"),void 0===o&&(o="middle"),void 0===h&&(h="middle"),void 0===l&&(l="currentColor"),void 0===u&&(u=1);var c=document.createElementNS(e.SVGNS,"text");c.setAttributeNS(null,"font-family","sans-serif"),c.setAttributeNS(null,"font-size",a),c.setAttributeNS(null,"font-weight",r),c.setAttributeNS(null,"x","".concat(n)),c.setAttributeNS(null,"y","".concat(s)),c.setAttributeNS(null,"text-anchor",o),c.setAttributeNS(null,"dominant-baseline",h),"currentColor"!==l&&c.setAttributeNS(null,"fill",l),u<1&&c.setAttributeNS(null,"opacity","".concat(u));var d=document.createTextNode(i);return c.appendChild(d),t.appendChild(c),c},e.createSVGGroupChild=function(t,i){var n=document.createElementNS(e.SVGNS,"g");return i&&n.setAttribute("data-id",i),t.appendChild(n),n},e.setBlinkAnimation=function(t,i,n){void 0===i&&(i=!0),void 0===n&&(n="1s");var s=t.querySelector('animate[attributeName="opacity"]');return i?s?(s.setAttributeNS(null,"repeatCount","indefinite"),s.beginElement()):((s=document.createElementNS(e.SVGNS,"animate")).setAttributeNS(null,"attributeName","opacity"),s.setAttributeNS(null,"values","1;0.2;1"),s.setAttributeNS(null,"keyTimes","0;0.5;1"),s.setAttributeNS(null,"dur",n),s.setAttributeNS(null,"repeatCount","indefinite"),t.appendChild(s)):(s&&(s.endElement(),s.setAttributeNS(null,"repeatCount","0"),t.style.opacity="1"),t.style.opacity="1"),t},e.setFill=function(t,e){t.setAttributeNS(null,"fill",e)},e.setStroke=function(t,e,i){t.setAttributeNS(null,"stroke",e),t.setAttributeNS(null,"stroke-width","".concat(i))},e.highlightElement=function(t,e){var i=[];return t.matches("text, path")&&i.push(t),t.querySelectorAll("text, path").forEach((function(t){i.push(t)})),i.forEach((function(t){"none"!==t.getAttribute("fill")&&t.setAttribute("fill",e)})),t},e.resetElementHighlight=function(t,e){t.querySelectorAll("text, path").forEach((function(t){"none"!==t.getAttribute("fill")&&t.setAttribute("fill",e)}))},e.SVGNS="http://www.w3.org/2000/svg"},826:(t,e,i)=>{Object.defineProperty(e,"__esModule",{value:!0}),e.JianpuBlock=void 0,e.splitJianpuNote=a;var n=i(214);function s(t){return Math.abs(t)<1e-6}function a(t,e){var i=t.start+t.length;if(e<=t.start||e>=i||s(i-e))return null;var n=i-e;t.length=e-t.start;var a={start:e,length:n,pitch:t.pitch,intensity:t.intensity,jianpuNumber:t.jianpuNumber,octaveDot:t.octaveDot,accidental:0,tiedFrom:t};return t.tiedTo&&(a.tiedTo=t.tiedTo,t.tiedTo.tiedFrom=a),t.tiedTo=a,a}var r=function(){function t(t,e,i,n){void 0===t&&(t=0),void 0===e&&(e=0),void 0===i&&(i=[]),void 0===n&&(n=1),this.start=t,this.length=e,this.notes=i,this.measureNumber=n}return t.prototype.addNote=function(t){if(0===this.notes.length)return this.start=t.start,this.length=t.length,this.notes.push(t),!0;if(!s(this.start-t.start))return console.warn("JianpuBlock: Attempted to add note at ".concat(t.start," to block starting at ").concat(this.start,". Ignoring.")),!1;for(var e=!1,i=!1,n=0;n<this.notes.length;n++)if(this.notes[n].pitch===t.pitch){i=!0,t.length<this.notes[n].length&&(this.notes[n].tiedFrom&&(t.tiedFrom=this.notes[n].tiedFrom,t.tiedFrom&&(t.tiedFrom.tiedTo=t)),this.notes[n].tiedTo&&(t.tiedTo=this.notes[n].tiedTo,t.tiedTo&&(t.tiedTo.tiedFrom=t)),this.notes[n]=t,e=!0);break}i||this.notes.push(t);for(var a=1/0,r=0,o=this.notes;r<o.length;r++){var h=o[r];a=Math.min(a,h.length)}return this.length=a,!i||e},t.prototype.split=function(e,i){var n=this.start+this.length;if(e<=this.start||e>=n||s(n-e))return null;for(var r=n-e,o=e-this.start,h=new t(e,r,[],i.measureNumberAtQ(e)),l=[],u=0,c=this.notes;u<c.length;u++){var d=c[u],p=d.start+d.length;if(p>e+1e-6){var g=a(d,e);g?l.push(g):console.warn("Split failed for note, unexpected state.")}else s(p-e)}return l.forEach((function(t){return h.addNote(t)})),this.length=o,delete this.durationLines,delete this.augmentationDots,delete this.augmentationDash,this.beatEnd&&(h.beatEnd=!0,delete this.beatEnd),this.isTieEnd&&(h.isTieStart=!0,delete this.isTieEnd),h},t.prototype.splitToBeat=function(t){var e=t.timeSignatureAtQ(this.start);if(!e)return null;var i=t.measureLengthAtQ(this.start),n=t.measureNumberAtQ(this.start),a=this.start-(n-Math.floor(n))*i,r=this.start-a,o=4/e.denominator,h=r/o;this.beatBegin=s(h-Math.round(h));var l=a+(Math.floor(h+1e-6)+1)*o,u=a+i,c=this.start+this.length,d=null;l<c-1e-6&&l>this.start+1e-6&&(d=l),u<c-1e-6&&u>this.start+1e-6&&(null===d||u<d)&&(d=u);var p=null;if(null!==d)(p=this.split(d,t))&&(this.beatEnd=!0);else{var g=(r+this.length)/o;this.beatEnd=s(g-Math.round(g)),this.beatEnd||(this.beatEnd=s(c-u))}return this.isTieStart=this.notes.some((function(t){return t.tiedFrom})),this.isTieEnd=this.notes.some((function(t){return t.tiedTo})),p&&(p.isTieStart=p.notes.some((function(t){return t.tiedFrom})),p.isTieEnd=p.notes.some((function(t){return t.tiedTo})),this.notes.some((function(t){return t.tiedTo&&t.start+t.length>d}))&&delete this.isTieEnd),p},t.prototype.calculateRenderProperties=function(t){delete this.durationLines,delete this.augmentationDots,delete this.augmentationDash;var e=this.length;if(!(s(e)||e<0)){if(t.allowDottedRests||this.notes.length>0){if(s(e-1.5))return void(this.augmentationDots=1);if(s(e-.75))return this.durationLines=1,void(this.augmentationDots=1);if(s(e-.375))return this.durationLines=2,void(this.augmentationDots=1);s(e-3)&&(this.augmentationDots=1)}if(this.durationLines=e>=3.999999||e>=1.999999||e>=.999999?0:e>=.499999?1:e>=.249999?2:e>=.124999?3:4,this.augmentationDash=!1,1===this.notes.length){var i=this.notes[0],n=t.timeSignatureAtQ(this.start);if(!n)return;var a=Math.max(4/n.denominator,1);if(!(this.measureNumber%1<=1e-6)&&i.tiedFrom&&s(i.tiedFrom.length-a)&&i.tiedFrom.pitch===i.pitch&&i.length>=1){var r=!0;if(i.tiedTo){var o=i.start+i.length;r=Math.floor(t.measureNumberAtQ(this.start))===Math.floor(t.measureNumberAtQ(o))&&i.tiedTo.length>=1}r&&(this.augmentationDash=!0)}}}},t.prototype.splitToStandardSymbol=function(t){var e=this.length;if(s(e)||e<n.MIN_RESOLUTION-1e-6)return null;var i=[];t.allowDottedRests||this.notes.length>0?(i.push(6),i.push(4),i.push(3),i.push(2),i.push(1.5),i.push(1),i.push(.75),i.push(.5),i.push(.375),i.push(.25),i.push(.125),i.push(.0625)):(i.push(4),i.push(2),i.push(1),i.push(.5),i.push(.25),i.push(.125),i.push(.0625));for(var a=0,r=0,o=i;r<o.length;r++){var h=o[r];if(e>=h-1e-6){a=h;break}}s(a)&&e<(a=n.MIN_RESOLUTION)-1e-6&&e>1e-6&&console.warn("Block length ".concat(e," is too small, rendering as ").concat(a));var l=null;return e>a+1e-6?(l=this.split(this.start+a,t),this.length!==a&&(console.warn("Adjusting block length after split from ".concat(this.length," to ").concat(a)),this.length=a)):this.length=a,l},t.prototype.mergeToMap=function(t){var e=t.get(this.start);e?(this.notes.forEach((function(t){return e.addNote(t)})),0!==this.measureNumber&&(e.measureNumber=this.measureNumber)):t.set(this.start,this)},t.prototype.isMeasureBeginning=function(){return s(this.measureNumber-Math.floor(this.measureNumber))},t}();e.JianpuBlock=r},980:(t,e,i)=>{Object.defineProperty(e,"__esModule",{value:!0}),e.MeasuresInfo=void 0;var n=i(567),s=i(214),a=function(){function t(t,e){this.allowDottedRests=!0,this.measuresInfo=[];for(var i=0,a=0,r=0,o=t.tempos[0],h=t.keySignatures[0],l=t.timeSignatures[0],u=1,c=(0,n.getMeasureLength)(l),d=l.start,p=s.MIN_RESOLUTION,g=0;g<e;g+=p){var m={start:g,measureNumber:u+(g-d)/c,measureLength:c,tempo:o,keySignature:h,timeSignature:l};i<t.tempos.length&&Math.abs(t.tempos[i].start-g)<p/2&&(o=t.tempos[i++],m.tempo=o,m.tempoChange=!0),a<t.keySignatures.length&&Math.abs(t.keySignatures[a].start-g)<p/2&&(h=t.keySignatures[a++],m.keySignature=h,m.keyChange=!0),r<t.timeSignatures.length&&Math.abs(t.timeSignatures[r].start-g)<p/2&&(u+=(t.timeSignatures[r].start-d)/c,u=Math.round(1e3*u)/1e3,l=t.timeSignatures[r++],m.timeSignature=l,c=(0,n.getMeasureLength)(l),m.measureLength=c,m.measureNumber=u,m.timeChange=!0,d=m.start),this.measuresInfo.push(m)}}return t.prototype.findIndex=function(t){return Math.max(0,Math.min(this.measuresInfo.length-1,Math.floor(t/s.MIN_RESOLUTION)))},t.prototype.measureNumberAtQ=function(t){if(0===this.measuresInfo.length)return 1;var e=this.findIndex(t),i=this.measuresInfo[e],n=(t-i.start)/i.measureLength;return i.measureNumber+n+1e-9},t.prototype.measureLengthAtQ=function(t){if(0===this.measuresInfo.length)return(0,n.getMeasureLength)(n.DEFAULT_TIME_SIGNATURE);var e=this.findIndex(t);return this.measuresInfo[e].measureLength},t.prototype.tempoAtQ=function(t,e){if(void 0===e&&(e=!1),0===this.measuresInfo.length)return n.DEFAULT_TEMPO.qpm;var i=this.findIndex(t),a=this.measuresInfo[i],r=Math.abs(a.start-t)<s.MIN_RESOLUTION/2;return!e||a.tempoChange&&r?a.tempo.qpm:-1},t.prototype.keySignatureAtQ=function(t,e){if(void 0===e&&(e=!1),0===this.measuresInfo.length)return n.DEFAULT_KEY_SIGNATURE.key;var i=this.findIndex(t),a=this.measuresInfo[i],r=Math.abs(a.start-t)<s.MIN_RESOLUTION/2;return!e||a.keyChange&&r?a.keySignature.key:-1},t.prototype.timeSignatureAtQ=function(t,e){if(void 0===e&&(e=!1),0===this.measuresInfo.length)return n.DEFAULT_TIME_SIGNATURE;var i=this.findIndex(t),a=this.measuresInfo[i],r=Math.abs(a.start-t)<s.MIN_RESOLUTION/2;return!e||a.timeChange&&r?a.timeSignature:null},t.prototype.quartersToTime=function(t,e){var i=this.tempoAtQ(e);return i<=0?0:t/i*60},t.prototype.timeToQuarters=function(t,e){var i=this.tempoAtQ(e);if(i<=0)return 0;var n=t*i/60;return Math.round(n*s.MAX_QUARTER_DIVISION)/s.MAX_QUARTER_DIVISION},t.prototype.isBeatStart=function(t){if(0===this.measuresInfo.length)return!1;var e=this.findIndex(t),i=this.measuresInfo[e],n=i.timeSignature,a=(t-(i.start-(i.measureNumber-Math.floor(i.measureNumber))*i.measureLength))/(4/n.denominator);return Math.abs(a-Math.round(a))<s.MIN_RESOLUTION/2},t}();e.MeasuresInfo=a}},s={};function a(t){var e=s[t];if(void 0!==e)return e.exports;var i=s[t]={exports:{}};return n[t].call(i.exports,i,i.exports,a),i.exports}t=a(291),e=a(229),i=document.getElementById("demo-container"),t.testData.forEach((function(t,n){var s=document.createElement("div");s.className="test-case",s.innerHTML="\n    <h3>".concat(n+1,". ").concat(t.title,"</h3>\n    <p>").concat(t.description,'</p>\n    <div class="jianpu-container" id="case-').concat(n,'"></div>\n    <hr>\n  '),i.appendChild(s);var a=document.getElementById("case-".concat(n));new e.JianpuSVGRender(t.data,{},a)}))})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,